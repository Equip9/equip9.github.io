I"@F<p>Although I’m a Ruby on Rails lover today I’m going to write about how to deploy a fresh installation of <a href="https://www.django-cms.org/en/">django-CMS</a> to <a href="https://www.heroku.com/">Heroku</a> using <a href="http://aws.amazon.com/s3/">Amazon S3</a> for storing static files.</p>

<p>This is a compilation from these sites:</p>

<ul>
  <li><a href="https://devcenter.heroku.com/articles/django">Getting Started with Django on Heroku</a></li>
  <li><a href="http://docs.django-cms.org/en/2.4.0/getting_started/tutorial.html#getting-help">django cms Documentation. Introductory Tutorial</a></li>
</ul>

<p>First of all we’ll create our application directory <code class="highlighter-rouge">my_app</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">mkdir </span>my_app <span class="o">&amp;&amp;</span> <span class="nb">cd </span>my_app
</code></pre></div></div>

<p>Next, we’ll create our Python’s virtual environment using <code class="highlighter-rouge">virtualenv</code> and activate it</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>virtualenv <span class="nt">--no-site-packages</span> venv 
<span class="nv">$ </span><span class="nb">source </span>venv/bin/activate
</code></pre></div></div>

<p>Now we can install required Python packages like django itself, django-cms, gunicorn (web server) and some others with <code class="highlighter-rouge">pip</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>pip <span class="nb">install </span>Django psycopg2 gunicorn dj-database-url django-cms PIL django-storage
</code></pre></div></div>

<p>We’ll need the <code class="highlighter-rouge">requirements.txt</code> file to deploy to Heroku</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>pip freeze <span class="o">&gt;</span> requirements.txt
</code></pre></div></div>

<p>And create our django project inside the current directory:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>django-admin.py startproject my_app <span class="nb">.</span>
</code></pre></div></div>

<p>Add these lines to the <code class="highlighter-rouge">my_app/settings.py</code> file</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># -*- coding: utf-8 -*-
</span><span class="kn">import</span> <span class="nn">os</span>
<span class="n">gettext</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">s</span><span class="p">:</span> <span class="n">s</span>
<span class="n">PROJECT_PATH</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">__file__</span><span class="p">))</span>
</code></pre></div></div>

<p>and add these in your <code class="highlighter-rouge">INSTALLED_APPS</code> array inside <code class="highlighter-rouge">my_app/settings.py</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">(</span>
	<span class="c1"># ...
</span>	<span class="s">'cms'</span><span class="p">,</span>
	<span class="s">'mptt'</span><span class="p">,</span>
	<span class="s">'menus'</span><span class="p">,</span>
	<span class="s">'south'</span><span class="p">,</span>
	<span class="s">'sekizai'</span><span class="p">,</span>
	<span class="s">'cms.plugins.file'</span><span class="p">,</span>
	<span class="s">'cms.plugins.flash'</span><span class="p">,</span>
	<span class="s">'cms.plugins.googlemap'</span><span class="p">,</span>
	<span class="s">'cms.plugins.link'</span><span class="p">,</span>
	<span class="s">'cms.plugins.picture'</span><span class="p">,</span>
	<span class="s">'cms.plugins.snippet'</span><span class="p">,</span>
	<span class="s">'cms.plugins.teaser'</span><span class="p">,</span>
	<span class="s">'cms.plugins.text'</span><span class="p">,</span>
	<span class="s">'cms.plugins.video'</span><span class="p">,</span>
	<span class="s">'cms.plugins.twitter'</span><span class="p">,</span>
	<span class="s">'storages'</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div></div>

<p>And add these to your <code class="highlighter-rouge">MIDDLEWARE_CLASSES</code> and <code class="highlighter-rouge">TEMPLATE_CONTEXT_PROCESSORS</code> arrays inside <code class="highlighter-rouge">my_app/settings.py</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">MIDDLEWARE_CLASSES</span> <span class="o">=</span> <span class="p">(</span>
    <span class="s">'django.contrib.sessions.middleware.SessionMiddleware'</span><span class="p">,</span>
    <span class="s">'django.middleware.csrf.CsrfViewMiddleware'</span><span class="p">,</span>
    <span class="s">'django.contrib.auth.middleware.AuthenticationMiddleware'</span><span class="p">,</span>
    <span class="s">'django.contrib.messages.middleware.MessageMiddleware'</span><span class="p">,</span>
    <span class="s">'django.middleware.locale.LocaleMiddleware'</span><span class="p">,</span>
    <span class="s">'django.middleware.doc.XViewMiddleware'</span><span class="p">,</span>
    <span class="s">'django.middleware.common.CommonMiddleware'</span><span class="p">,</span>
    <span class="s">'cms.middleware.page.CurrentPageMiddleware'</span><span class="p">,</span>
    <span class="s">'cms.middleware.user.CurrentUserMiddleware'</span><span class="p">,</span>
    <span class="s">'cms.middleware.toolbar.ToolbarMiddleware'</span><span class="p">,</span>
    <span class="s">'cms.middleware.language.LanguageCookieMiddleware'</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TEMPLATE_CONTEXT_PROCESSORS</span> <span class="o">=</span> <span class="p">(</span>
    <span class="s">'django.contrib.auth.context_processors.auth'</span><span class="p">,</span>
    <span class="s">'django.core.context_processors.i18n'</span><span class="p">,</span>
    <span class="s">'django.core.context_processors.request'</span><span class="p">,</span>
    <span class="s">'django.core.context_processors.media'</span><span class="p">,</span>
    <span class="s">'django.core.context_processors.static'</span><span class="p">,</span>
    <span class="s">'cms.context_processors.media'</span><span class="p">,</span>
    <span class="s">'sekizai.context_processors.sekizai'</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div></div>

<p>Now we’ll configure our templates. First, create the directory where we’ll put our django templates</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">mkdir </span>templates
</code></pre></div></div>

<p>and create two empty files:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">touch </span>templates/template_1.html
<span class="nv">$ </span><span class="nb">touch </span>templates/template_2.html
</code></pre></div></div>

<p>in order two access these templates we have to put them in our <code class="highlighter-rouge">settings.py</code> file and set up available languages</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TEMPLATE_DIRS</span> <span class="o">=</span> <span class="p">(</span>
    <span class="c1"># The docs say it should be absolute path: PROJECT_PATH is precisely one.
</span>    <span class="c1"># Life is wonderful!
</span>    <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">PROJECT_PATH</span><span class="p">,</span> <span class="s">"templates"</span><span class="p">),</span>
<span class="p">)</span>

<span class="n">CMS_TEMPLATES</span> <span class="o">=</span> <span class="p">(</span>
    <span class="p">(</span><span class="s">'template_1.html'</span><span class="p">,</span> <span class="s">'Template One'</span><span class="p">),</span>
    <span class="p">(</span><span class="s">'template_2.html'</span><span class="p">,</span> <span class="s">'Template Two'</span><span class="p">),</span>
<span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">LANGUAGES</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">(</span><span class="s">'en'</span><span class="p">,</span> <span class="s">'English'</span><span class="p">),</span>
<span class="p">]</span>
</code></pre></div></div>

<p>Now let’s configure our <code class="highlighter-rouge">my_app/urls.py</code>. First, uncomment this line</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">admin</span><span class="o">.</span><span class="n">autodiscover</span><span class="p">()</span>
</code></pre></div></div>

<p>And add these lines</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">urlpatterns</span> <span class="o">=</span> <span class="n">i18n_patterns</span><span class="p">(</span><span class="s">''</span><span class="p">,</span>
    <span class="n">url</span><span class="p">(</span><span class="s">r'^admin/'</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">urls</span><span class="p">)),</span>
    <span class="n">url</span><span class="p">(</span><span class="s">r'^'</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="s">'cms.urls'</span><span class="p">)),</span>
<span class="p">)</span>

<span class="k">if</span> <span class="n">settings</span><span class="o">.</span><span class="n">DEBUG</span><span class="p">:</span>
    <span class="n">urlpatterns</span> <span class="o">=</span> <span class="n">patterns</span><span class="p">(</span><span class="s">''</span><span class="p">,</span>
    <span class="n">url</span><span class="p">(</span><span class="s">r'^media/(?P&lt;path&gt;.*)$'</span><span class="p">,</span> <span class="s">'django.views.static.serve'</span><span class="p">,</span>
        <span class="p">{</span><span class="s">'document_root'</span><span class="p">:</span> <span class="n">settings</span><span class="o">.</span><span class="n">MEDIA_ROOT</span><span class="p">,</span> <span class="s">'show_indexes'</span><span class="p">:</span> <span class="bp">True</span><span class="p">}),</span>
    <span class="n">url</span><span class="p">(</span><span class="s">r''</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="s">'django.contrib.staticfiles.urls'</span><span class="p">)),</span>
<span class="p">)</span> <span class="o">+</span> <span class="n">urlpatterns</span>
</code></pre></div></div>

<p>Now let’s create the base layout inside templates directory <code class="highlighter-rouge">templates/base.html</code></p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
{% load cms_tags sekizai_tags %}
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
      {% render_block "css" %}
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
      {% cms_toolbar %}
      {% placeholder base_content %}
      {% block base_content %}{\% endblock %}
      {% render_block "js" %}
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>

</code></pre></div></div>

<p>And we can edit the <code class="highlighter-rouge">templates/template_1.html</code> template</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
{% extends "base.html" %}
{% load cms_tags %}

{% block base_content %}
  {% placeholder template_1_content %}
{% endblock %}

</code></pre></div></div>

<p>If you just did a fresh install of django projects run these commands to set up your database</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>python manage.py syncdb <span class="nt">--all</span>
<span class="nv">$ </span>python manage.py migrate <span class="nt">--fake</span>
</code></pre></div></div>

<p>If you want to fire up a webserver to test your local set up you can run</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>python manage.py runserver
</code></pre></div></div>

<p>Now you can open a browser window and go to <a href="http://localhost:8000/">http://localhost:8000/</a></p>

<p>In order to deploy to Heroku we’ll have to setup the database in the <code class="highlighter-rouge">my_app/settings.py</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Parse database configuration from $DATABASE_URL
</span><span class="kn">import</span> <span class="nn">dj_database_url</span>
<span class="n">DATABASES</span><span class="p">[</span><span class="s">'default'</span><span class="p">]</span> <span class="o">=</span>  <span class="n">dj_database_url</span><span class="o">.</span><span class="n">config</span><span class="p">()</span>

<span class="c1"># Honor the 'X-Forwarded-Proto' header for request.is_secure()
</span><span class="n">SECURE_PROXY_SSL_HEADER</span> <span class="o">=</span> <span class="p">(</span><span class="s">'HTTP_X_FORWARDED_PROTO'</span><span class="p">,</span> <span class="s">'https'</span><span class="p">)</span>
</code></pre></div></div>

<p>Add a <code class="highlighter-rouge">Procfile</code> file in your project root</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>web: gunicorn my_app.wsgi: 
</code></pre></div></div>

<p>Finally add your Amazon credentials into <code class="highlighter-rouge">settings.py</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Amazon S3 credentials
</span><span class="n">AWS_ACCESS_KEY_ID</span>       <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">'AWS_ACCESS_KEY_ID'</span><span class="p">]</span>
<span class="n">AWS_SECRET_ACCESS_KEY</span>   <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">'AWS_SECRET_ACCESS_KEY'</span><span class="p">]</span>

<span class="c1"># Amazon S3 URL
</span><span class="n">AWS_STORAGE_BUCKET_NAME</span> <span class="o">=</span> <span class="s">'&lt;your-bucket-name&gt;'</span>
<span class="n">S3_URL</span> <span class="o">=</span> <span class="s">'http://</span><span class="si">%</span><span class="s">s.s3.amazonaws.com/'</span> <span class="o">%</span> <span class="n">AWS_STORAGE_BUCKET_NAME</span>

<span class="c1"># Static files location
</span><span class="n">STATICFILES_STORAGE</span> <span class="o">=</span> <span class="s">'storages.backends.s3boto.S3BotoStorage'</span>
<span class="n">STATIC_URL</span> <span class="o">=</span> <span class="n">S3_URL</span>

<span class="c1"># Default File storage
</span><span class="n">DEFAULT_FILE_STORAGE</span> <span class="o">=</span> <span class="s">'storages.backends.s3boto.S3BotoStorage'</span>
<span class="n">MEDIA_URL</span> <span class="o">=</span> <span class="n">S3_URL</span>
</code></pre></div></div>

<p>If you need to use <em>Amazon S3</em> using <em>http</em> instead of <em>https</em> change this constant to <code class="highlighter-rouge">False</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">AWS_S3_SECURE_URLS</span> <span class="o">=</span> <span class="bp">False</span>
</code></pre></div></div>

<p>You may alse collect your static files and upload them to <em>Amazon S3</em></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>python manage.py collectstatic
</code></pre></div></div>

<p>Now you can push to Heroku and set up the database</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git push heroku master
<span class="nv">$ </span>heroku run python manage.py syncdb <span class="nt">--all</span>
<span class="nv">$ </span>heroku run python manage.py migrate <span class="nt">--fake</span>
</code></pre></div></div>

<p>After adding a new plugin or changing your database you’ll have to execute</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>heroku run python manage.py syncdb
<span class="nv">$ </span>heroku run python manage.py migrate
</code></pre></div></div>
:ET